/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BonanzaMarketplaceInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "buyItem(address,uint256,address,uint256)": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "createListing(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeReceipient()": FunctionFragment;
    "listings(address,uint256,address)": FunctionFragment;
    "nftWhitelist(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setPaymentToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateListing(address,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "addToWhitelist"
      | "buyItem"
      | "cancelListing"
      | "createListing"
      | "fee"
      | "feeReceipient"
      | "listings"
      | "nftWhitelist"
      | "owner"
      | "paymentToken"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "setFee"
      | "setFeeRecipient"
      | "setPaymentToken"
      | "transferOwnership"
      | "updateListing"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nftWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;

  events: {
    "ItemCanceled(address,address,uint256)": EventFragment;
    "ItemListed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemSold(address,address,address,uint256,uint256,uint256)": EventFragment;
    "ItemUpdated(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NftWhitelistAdd(address)": EventFragment;
    "NftWhitelistRemove(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateFee(uint256)": EventFragment;
    "UpdateFeeRecipient(address)": EventFragment;
    "UpdatePaymentToken(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftWhitelistAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftWhitelistRemove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePaymentToken"): EventFragment;
}

export interface ItemCanceledEventObject {
  seller: string;
  nftAddress: string;
  tokenId: BigNumber;
}
export type ItemCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  ItemCanceledEventObject
>;

export type ItemCanceledEventFilter = TypedEventFilter<ItemCanceledEvent>;

export interface ItemListedEventObject {
  seller: string;
  nftAddress: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  pricePerItem: BigNumber;
  expirationTime: BigNumber;
}
export type ItemListedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface ItemSoldEventObject {
  seller: string;
  buyer: string;
  nftAddress: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  pricePerItem: BigNumber;
}
export type ItemSoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  ItemSoldEventObject
>;

export type ItemSoldEventFilter = TypedEventFilter<ItemSoldEvent>;

export interface ItemUpdatedEventObject {
  seller: string;
  nftAddress: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  pricePerItem: BigNumber;
  expirationTime: BigNumber;
}
export type ItemUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemUpdatedEventObject
>;

export type ItemUpdatedEventFilter = TypedEventFilter<ItemUpdatedEvent>;

export interface NftWhitelistAddEventObject {
  nft: string;
}
export type NftWhitelistAddEvent = TypedEvent<
  [string],
  NftWhitelistAddEventObject
>;

export type NftWhitelistAddEventFilter = TypedEventFilter<NftWhitelistAddEvent>;

export interface NftWhitelistRemoveEventObject {
  nft: string;
}
export type NftWhitelistRemoveEvent = TypedEvent<
  [string],
  NftWhitelistRemoveEventObject
>;

export type NftWhitelistRemoveEventFilter =
  TypedEventFilter<NftWhitelistRemoveEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdateFeeEventObject {
  fee: BigNumber;
}
export type UpdateFeeEvent = TypedEvent<[BigNumber], UpdateFeeEventObject>;

export type UpdateFeeEventFilter = TypedEventFilter<UpdateFeeEvent>;

export interface UpdateFeeRecipientEventObject {
  feeRecipient: string;
}
export type UpdateFeeRecipientEvent = TypedEvent<
  [string],
  UpdateFeeRecipientEventObject
>;

export type UpdateFeeRecipientEventFilter =
  TypedEventFilter<UpdateFeeRecipientEvent>;

export interface UpdatePaymentTokenEventObject {
  paymentToken: string;
}
export type UpdatePaymentTokenEvent = TypedEvent<
  [string],
  UpdatePaymentTokenEventObject
>;

export type UpdatePaymentTokenEventFilter =
  TypedEventFilter<UpdatePaymentTokenEvent>;

export interface BonanzaMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BonanzaMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReceipient(overrides?: CallOverrides): Promise<[string]>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        pricePerItem: BigNumber;
        expirationTime: BigNumber;
      }
    >;

    nftWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    removeFromWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newQuantity: PromiseOrValue<BigNumberish>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      _newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  addToWhitelist(
    _nft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItem(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _pricePerItem: PromiseOrValue<BigNumberish>,
    _expirationTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeReceipient(overrides?: CallOverrides): Promise<string>;

  listings(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      quantity: BigNumber;
      pricePerItem: BigNumber;
      expirationTime: BigNumber;
    }
  >;

  nftWhitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  removeFromWhitelist(
    _nft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentToken(
    _paymentToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateListing(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _newQuantity: PromiseOrValue<BigNumberish>,
    _newPricePerItem: PromiseOrValue<BigNumberish>,
    _newExpirationTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceipient(overrides?: CallOverrides): Promise<string>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        pricePerItem: BigNumber;
        expirationTime: BigNumber;
      }
    >;

    nftWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    removeFromWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newQuantity: PromiseOrValue<BigNumberish>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      _newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemCanceled(address,address,uint256)"(
      seller?: null,
      nftAddress?: null,
      tokenId?: null
    ): ItemCanceledEventFilter;
    ItemCanceled(
      seller?: null,
      nftAddress?: null,
      tokenId?: null
    ): ItemCanceledEventFilter;

    "ItemListed(address,address,uint256,uint256,uint256,uint256)"(
      seller?: null,
      nftAddress?: null,
      tokenId?: null,
      quantity?: null,
      pricePerItem?: null,
      expirationTime?: null
    ): ItemListedEventFilter;
    ItemListed(
      seller?: null,
      nftAddress?: null,
      tokenId?: null,
      quantity?: null,
      pricePerItem?: null,
      expirationTime?: null
    ): ItemListedEventFilter;

    "ItemSold(address,address,address,uint256,uint256,uint256)"(
      seller?: null,
      buyer?: null,
      nftAddress?: null,
      tokenId?: null,
      quantity?: null,
      pricePerItem?: null
    ): ItemSoldEventFilter;
    ItemSold(
      seller?: null,
      buyer?: null,
      nftAddress?: null,
      tokenId?: null,
      quantity?: null,
      pricePerItem?: null
    ): ItemSoldEventFilter;

    "ItemUpdated(address,address,uint256,uint256,uint256,uint256)"(
      seller?: null,
      nftAddress?: null,
      tokenId?: null,
      quantity?: null,
      pricePerItem?: null,
      expirationTime?: null
    ): ItemUpdatedEventFilter;
    ItemUpdated(
      seller?: null,
      nftAddress?: null,
      tokenId?: null,
      quantity?: null,
      pricePerItem?: null,
      expirationTime?: null
    ): ItemUpdatedEventFilter;

    "NftWhitelistAdd(address)"(nft?: null): NftWhitelistAddEventFilter;
    NftWhitelistAdd(nft?: null): NftWhitelistAddEventFilter;

    "NftWhitelistRemove(address)"(nft?: null): NftWhitelistRemoveEventFilter;
    NftWhitelistRemove(nft?: null): NftWhitelistRemoveEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdateFee(uint256)"(fee?: null): UpdateFeeEventFilter;
    UpdateFee(fee?: null): UpdateFeeEventFilter;

    "UpdateFeeRecipient(address)"(
      feeRecipient?: null
    ): UpdateFeeRecipientEventFilter;
    UpdateFeeRecipient(feeRecipient?: null): UpdateFeeRecipientEventFilter;

    "UpdatePaymentToken(address)"(
      paymentToken?: null
    ): UpdatePaymentTokenEventFilter;
    UpdatePaymentToken(paymentToken?: null): UpdatePaymentTokenEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceipient(overrides?: CallOverrides): Promise<BigNumber>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newQuantity: PromiseOrValue<BigNumberish>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      _newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newQuantity: PromiseOrValue<BigNumberish>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      _newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
