/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SafuWalletLibraryInterface extends utils.Interface {
  functions: {
    "isOwner(address)": FunctionFragment;
    "m_numOwners()": FunctionFragment;
    "m_lastDay()": FunctionFragment;
    "m_spentToday()": FunctionFragment;
    "m_required()": FunctionFragment;
    "confirm(bytes32)": FunctionFragment;
    "initDaylimit(uint256)": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "hasConfirmed(bytes32,address)": FunctionFragment;
    "getOwner(uint256)": FunctionFragment;
    "initMultiowned(address[],uint256)": FunctionFragment;
    "kill(address)": FunctionFragment;
    "initWallet(address[],uint256,uint256)": FunctionFragment;
    "m_dailyLimit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isOwner"
      | "m_numOwners"
      | "m_lastDay"
      | "m_spentToday"
      | "m_required"
      | "confirm"
      | "initDaylimit"
      | "execute"
      | "revoke"
      | "hasConfirmed"
      | "getOwner"
      | "initMultiowned"
      | "kill"
      | "initWallet"
      | "m_dailyLimit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "m_numOwners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "m_lastDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "m_spentToday",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_required",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initDaylimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasConfirmed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initMultiowned",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "kill",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initWallet",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "m_dailyLimit",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "m_numOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_lastDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "m_spentToday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_required", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confirm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDaylimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initMultiowned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "m_dailyLimit",
    data: BytesLike
  ): Result;

  events: {
    "Confirmation(address,bytes32)": EventFragment;
    "Revoke(address,bytes32)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "SingleTransact(address,uint256,address,bytes,address)": EventFragment;
    "MultiTransact(address,bytes32,uint256,address,bytes,address)": EventFragment;
    "ConfirmationNeeded(bytes32,address,uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SingleTransact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiTransact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmationNeeded"): EventFragment;
}

export interface ConfirmationEventObject {
  owner: string;
  operation: string;
}
export type ConfirmationEvent = TypedEvent<
  [string, string],
  ConfirmationEventObject
>;

export type ConfirmationEventFilter = TypedEventFilter<ConfirmationEvent>;

export interface RevokeEventObject {
  owner: string;
  operation: string;
}
export type RevokeEvent = TypedEvent<[string, string], RevokeEventObject>;

export type RevokeEventFilter = TypedEventFilter<RevokeEvent>;

export interface DepositEventObject {
  _from: string;
  value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface SingleTransactEventObject {
  owner: string;
  value: BigNumber;
  to: string;
  data: string;
  created: string;
}
export type SingleTransactEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  SingleTransactEventObject
>;

export type SingleTransactEventFilter = TypedEventFilter<SingleTransactEvent>;

export interface MultiTransactEventObject {
  owner: string;
  operation: string;
  value: BigNumber;
  to: string;
  data: string;
  created: string;
}
export type MultiTransactEvent = TypedEvent<
  [string, string, BigNumber, string, string, string],
  MultiTransactEventObject
>;

export type MultiTransactEventFilter = TypedEventFilter<MultiTransactEvent>;

export interface ConfirmationNeededEventObject {
  operation: string;
  initiator: string;
  value: BigNumber;
  to: string;
  data: string;
}
export type ConfirmationNeededEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  ConfirmationNeededEventObject
>;

export type ConfirmationNeededEventFilter =
  TypedEventFilter<ConfirmationNeededEvent>;

export interface SafuWalletLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafuWalletLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isOwner(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    m_numOwners(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_lastDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_spentToday(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_required(overrides?: CallOverrides): Promise<[BigNumber]>;

    confirm(
      _h: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initDaylimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _operation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasConfirmed(
      _operation: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getOwner(
      ownerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initMultiowned(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kill(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initWallet(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      _daylimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    m_dailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  isOwner(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  m_numOwners(overrides?: CallOverrides): Promise<BigNumber>;

  m_lastDay(overrides?: CallOverrides): Promise<BigNumber>;

  m_spentToday(overrides?: CallOverrides): Promise<BigNumber>;

  m_required(overrides?: CallOverrides): Promise<BigNumber>;

  confirm(
    _h: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initDaylimit(
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _operation: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasConfirmed(
    _operation: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getOwner(
    ownerIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initMultiowned(
    _owners: PromiseOrValue<string>[],
    _required: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kill(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initWallet(
    _owners: PromiseOrValue<string>[],
    _required: PromiseOrValue<BigNumberish>,
    _daylimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  m_dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    isOwner(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    m_numOwners(overrides?: CallOverrides): Promise<BigNumber>;

    m_lastDay(overrides?: CallOverrides): Promise<BigNumber>;

    m_spentToday(overrides?: CallOverrides): Promise<BigNumber>;

    m_required(overrides?: CallOverrides): Promise<BigNumber>;

    confirm(
      _h: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initDaylimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    revoke(
      _operation: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasConfirmed(
      _operation: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOwner(
      ownerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initMultiowned(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    kill(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    initWallet(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      _daylimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    m_dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Confirmation(address,bytes32)"(
      owner?: null,
      operation?: null
    ): ConfirmationEventFilter;
    Confirmation(owner?: null, operation?: null): ConfirmationEventFilter;

    "Revoke(address,bytes32)"(
      owner?: null,
      operation?: null
    ): RevokeEventFilter;
    Revoke(owner?: null, operation?: null): RevokeEventFilter;

    "Deposit(address,uint256)"(_from?: null, value?: null): DepositEventFilter;
    Deposit(_from?: null, value?: null): DepositEventFilter;

    "SingleTransact(address,uint256,address,bytes,address)"(
      owner?: null,
      value?: null,
      to?: null,
      data?: null,
      created?: null
    ): SingleTransactEventFilter;
    SingleTransact(
      owner?: null,
      value?: null,
      to?: null,
      data?: null,
      created?: null
    ): SingleTransactEventFilter;

    "MultiTransact(address,bytes32,uint256,address,bytes,address)"(
      owner?: null,
      operation?: null,
      value?: null,
      to?: null,
      data?: null,
      created?: null
    ): MultiTransactEventFilter;
    MultiTransact(
      owner?: null,
      operation?: null,
      value?: null,
      to?: null,
      data?: null,
      created?: null
    ): MultiTransactEventFilter;

    "ConfirmationNeeded(bytes32,address,uint256,address,bytes)"(
      operation?: null,
      initiator?: null,
      value?: null,
      to?: null,
      data?: null
    ): ConfirmationNeededEventFilter;
    ConfirmationNeeded(
      operation?: null,
      initiator?: null,
      value?: null,
      to?: null,
      data?: null
    ): ConfirmationNeededEventFilter;
  };

  estimateGas: {
    isOwner(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_numOwners(overrides?: CallOverrides): Promise<BigNumber>;

    m_lastDay(overrides?: CallOverrides): Promise<BigNumber>;

    m_spentToday(overrides?: CallOverrides): Promise<BigNumber>;

    m_required(overrides?: CallOverrides): Promise<BigNumber>;

    confirm(
      _h: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initDaylimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      _operation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasConfirmed(
      _operation: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(
      ownerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initMultiowned(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kill(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initWallet(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      _daylimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    m_dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isOwner(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_numOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_lastDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_spentToday(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirm(
      _h: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initDaylimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _operation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasConfirmed(
      _operation: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      ownerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initMultiowned(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kill(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initWallet(
      _owners: PromiseOrValue<string>[],
      _required: PromiseOrValue<BigNumberish>,
      _daylimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    m_dailyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
