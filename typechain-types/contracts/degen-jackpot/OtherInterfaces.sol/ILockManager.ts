/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IRevest {
  export type LockParamStruct = {
    addressLock: PromiseOrValue<string>;
    lockType: PromiseOrValue<BigNumberish>;
  };

  export type LockParamStructOutput = [string, number] & {
    addressLock: string;
    lockType: number;
  };

  export type LockStruct = {
    addressLock: PromiseOrValue<string>;
    lockType: PromiseOrValue<BigNumberish>;
    unlocked: PromiseOrValue<boolean>;
  };

  export type LockStructOutput = [string, number, boolean] & {
    addressLock: string;
    lockType: number;
    unlocked: boolean;
  };
}

export interface ILockManagerInterface extends utils.Interface {
  functions: {
    "createLock(uint256,(address,uint8))": FunctionFragment;
    "fnftIdToLock(uint256)": FunctionFragment;
    "fnftIdToLockId(uint256)": FunctionFragment;
    "getLock(uint256)": FunctionFragment;
    "getLockMaturity(uint256)": FunctionFragment;
    "lockTypes(uint256)": FunctionFragment;
    "pointFNFTToLock(uint256,uint256)": FunctionFragment;
    "unlockFNFT(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createLock"
      | "fnftIdToLock"
      | "fnftIdToLockId"
      | "getLock"
      | "getLockMaturity"
      | "lockTypes"
      | "pointFNFTToLock"
      | "unlockFNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createLock",
    values: [PromiseOrValue<BigNumberish>, IRevest.LockParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fnftIdToLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fnftIdToLockId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockMaturity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pointFNFTToLock",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fnftIdToLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fnftIdToLockId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointFNFTToLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockFNFT", data: BytesLike): Result;

  events: {};
}

export interface ILockManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILockManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lock: IRevest.LockParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fnftIdToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRevest.LockStructOutput]>;

    fnftIdToLockId(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRevest.LockStructOutput]>;

    getLockMaturity(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockTypes(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    pointFNFTToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockFNFT(
      fnftId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createLock(
    fnftId: PromiseOrValue<BigNumberish>,
    lock: IRevest.LockParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fnftIdToLock(
    fnftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRevest.LockStructOutput>;

  fnftIdToLockId(
    fnftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLock(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRevest.LockStructOutput>;

  getLockMaturity(
    fnftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockTypes(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  pointFNFTToLock(
    fnftId: PromiseOrValue<BigNumberish>,
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockFNFT(
    fnftId: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lock: IRevest.LockParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fnftIdToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRevest.LockStructOutput>;

    fnftIdToLockId(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRevest.LockStructOutput>;

    getLockMaturity(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockTypes(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    pointFNFTToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockFNFT(
      fnftId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    createLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lock: IRevest.LockParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fnftIdToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fnftIdToLockId(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockMaturity(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTypes(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointFNFTToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockFNFT(
      fnftId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lock: IRevest.LockParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fnftIdToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fnftIdToLockId(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockMaturity(
      fnftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTypes(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointFNFTToLock(
      fnftId: PromiseOrValue<BigNumberish>,
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockFNFT(
      fnftId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
