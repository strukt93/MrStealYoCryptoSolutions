/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Exploit,
  ExploitInterface,
} from "../../../contracts/freebie/Exploit";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "delegatedTransferERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101ea806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e88fb971461003b5780638da5cb5b14610057575b600080fd5b610055600480360381019061005091906100c8565b610075565b005b61005f61007a565b60405161006c919061012a565b60405180910390f35b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506100ad81610186565b92915050565b6000813590506100c28161019d565b92915050565b6000806000606084860312156100e1576100e0610181565b5b60006100ef8682870161009e565b93505060206101008682870161009e565b9250506040610111868287016100b3565b9150509250925092565b61012481610145565b82525050565b600060208201905061013f600083018461011b565b92915050565b600061015082610157565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b61018f81610145565b811461019a57600080fd5b50565b6101a681610177565b81146101b157600080fd5b5056fea26469706673582212209c472f53e356d6bc493c39333f14f62d1a20282ecf5fe0220d8030f0d744594764736f6c63430008070033";

type ExploitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exploit__factory extends ContractFactory {
  constructor(...args: ExploitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Exploit> {
    return super.deploy(overrides || {}) as Promise<Exploit>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Exploit {
    return super.attach(address) as Exploit;
  }
  override connect(signer: Signer): Exploit__factory {
    return super.connect(signer) as Exploit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitInterface {
    return new utils.Interface(_abi) as ExploitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exploit {
    return new Contract(address, _abi, signerOrProvider) as Exploit;
  }
}
