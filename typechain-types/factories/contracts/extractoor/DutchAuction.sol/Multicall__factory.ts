/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../../contracts/extractoor/DutchAuction.sol/Multicall";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610827806100206000396000f3fe60806040526004361061001e5760003560e01c8063ac9650d814610023575b600080fd5b61003d60048036038101906100389190610339565b610053565b60405161004a91906104ec565b60405180910390f35b60608282905067ffffffffffffffff81111561007257610071610713565b5b6040519080825280602002602001820160405280156100a557816020015b60608152602001906001900390816100905790505b50905060005b8383905081101561015857610127308585848181106100cd576100cc6106e4565b5b90506020028101906100df9190610550565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061015f565b82828151811061013a576101396106e4565b5b602002602001018190525080806101509061066c565b9150506100ab565b5092915050565b606061018483836040518060600160405280602781526020016107cb6027913961018c565b905092915050565b606061019784610259565b6101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90610530565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101fe91906104d5565b600060405180830381855af49150503d8060008114610239576040519150601f19603f3d011682016040523d82523d6000602084013e61023e565b606091505b509150915061024e82828661027c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561028c578290506102dc565b60008351111561029f5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d3919061050e565b60405180910390fd5b9392505050565b60008083601f8401126102f9576102f8610747565b5b8235905067ffffffffffffffff81111561031657610315610742565b5b60208301915083602082028301111561033257610331610756565b5b9250929050565b600080602083850312156103505761034f610765565b5b600083013567ffffffffffffffff81111561036e5761036d610760565b5b61037a858286016102e3565b92509250509250929050565b6000610392838361040f565b905092915050565b60006103a5826105c3565b6103af81856105f1565b9350836020820285016103c1856105b3565b8060005b858110156103fd57848403895281516103de8582610386565b94506103e9836105e4565b925060208a019950506001810190506103c5565b50829750879550505050505092915050565b600061041a826105ce565b6104248185610602565b9350610434818560208601610639565b61043d8161076a565b840191505092915050565b6000610453826105ce565b61045d8185610613565b935061046d818560208601610639565b80840191505092915050565b6000610484826105d9565b61048e818561061e565b935061049e818560208601610639565b6104a78161076a565b840191505092915050565b60006104bf60268361061e565b91506104ca8261077b565b604082019050919050565b60006104e18284610448565b915081905092915050565b60006020820190508181036000830152610506818461039a565b905092915050565b600060208201905081810360008301526105288184610479565b905092915050565b60006020820190508181036000830152610549816104b2565b9050919050565b6000808335600160200384360303811261056d5761056c610751565b5b80840192508235915067ffffffffffffffff82111561058f5761058e61074c565b5b6020830192506001820236038313156105ab576105aa61075b565b5b509250929050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000819050919050565b60005b8381101561065757808201518184015260208101905061063c565b83811115610666576000848401525b50505050565b60006106778261062f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106aa576106a96106b5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e7472616374000000000000000000000000000000000000000000000000000060208201525056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204525ab4cede0b7ea4501f3cbb19d0de7a2ba4225a380c84f99476431efd76cff64736f6c63430008070033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
