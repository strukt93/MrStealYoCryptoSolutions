/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OptionsMarket,
  OptionsMarketInterface,
} from "../../../contracts/opyn-sesame/OptionsMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "purchase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_optionsContract",
        type: "address",
      },
    ],
    name: "setOptionsContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200151d3803806200151d833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001ed565b92915050565b6000602082840312156200019b576200019a620001e8565b5b6000620001ab848285016200016b565b91505092915050565b6000620001c182620001c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001f881620001b4565b81146200020457600080fd5b50565b61130680620002176000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c457806391b7f5ed146100e2578063efef39a1146100fe578063f2fde38b1461011a5761007d565b80630d551e7b1461008257806347e7ef241461009e578063715018a6146100ba575b600080fd5b61009c60048036038101906100979190610ad1565b610136565b005b6100b860048036038101906100b39190610afe565b610213565b005b6100c26102f6565b005b6100cc61030a565b6040516100d99190610d9f565b60405180910390f35b6100fc60048036038101906100f79190610b6b565b610333565b005b61011860048036038101906101139190610b6b565b61038a565b005b610134600480360381019061012f9190610ad1565b610523565b005b61013e6105a7565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c690610f1c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a90610e5c565b60405180910390fd5b6102f2823083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610625909392919063ffffffff16565b5050565b6102fe6105a7565b61030860006106ae565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61033b6105a7565b600060035414610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037790610ebc565b60405180910390fd5b8060038190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103e59190610d9f565b60206040518083038186803b1580156103fd57600080fd5b505afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610b98565b811115610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90610e9c565b60405180910390fd5b6104d333306003548461048a9190610f8e565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610625909392919063ffffffff16565b6105203382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166107729092919063ffffffff16565b50565b61052b6105a7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059290610e3c565b60405180910390fd5b6105a4816106ae565b50565b6105af6107f8565b73ffffffffffffffffffffffffffffffffffffffff166105cd61030a565b73ffffffffffffffffffffffffffffffffffffffff1614610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a90610edc565b60405180910390fd5b565b6106a8846323b872dd60e01b85858560405160240161064693929190610dba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610800565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107f38363a9059cbb60e01b8484604051602401610791929190610df1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610800565b505050565b600033905090565b6000610862826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108c79092919063ffffffff16565b90506000815111156108c257808060200190518101906108829190610b3e565b6108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b890610f3c565b60405180910390fd5b5b505050565b60606108d684846000856108df565b90509392505050565b606082471015610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90610e7c565b60405180910390fd5b61092d856109f3565b61096c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096390610efc565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109959190610d88565b60006040518083038185875af1925050503d80600081146109d2576040519150601f19603f3d011682016040523d82523d6000602084013e6109d7565b606091505b50915091506109e7828286610a16565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610a2657829050610a76565b600083511115610a395782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d9190610e1a565b60405180910390fd5b9392505050565b600081359050610a8c8161128b565b92915050565b600081519050610aa1816112a2565b92915050565b600081359050610ab6816112b9565b92915050565b600081519050610acb816112b9565b92915050565b600060208284031215610ae757610ae6611092565b5b6000610af584828501610a7d565b91505092915050565b60008060408385031215610b1557610b14611092565b5b6000610b2385828601610a7d565b9250506020610b3485828601610aa7565b9150509250929050565b600060208284031215610b5457610b53611092565b5b6000610b6284828501610a92565b91505092915050565b600060208284031215610b8157610b80611092565b5b6000610b8f84828501610aa7565b91505092915050565b600060208284031215610bae57610bad611092565b5b6000610bbc84828501610abc565b91505092915050565b610bce81610fe8565b82525050565b6000610bdf82610f5c565b610be98185610f72565b9350610bf9818560208601611030565b80840191505092915050565b6000610c1082610f67565b610c1a8185610f7d565b9350610c2a818560208601611030565b610c3381611097565b840191505092915050565b6000610c4b602683610f7d565b9150610c56826110a8565b604082019050919050565b6000610c6e601183610f7d565b9150610c79826110f7565b602082019050919050565b6000610c91602683610f7d565b9150610c9c82611120565b604082019050919050565b6000610cb4600e83610f7d565b9150610cbf8261116f565b602082019050919050565b6000610cd7600d83610f7d565b9150610ce282611198565b602082019050919050565b6000610cfa602083610f7d565b9150610d05826111c1565b602082019050919050565b6000610d1d601d83610f7d565b9150610d28826111ea565b602082019050919050565b6000610d40601083610f7d565b9150610d4b82611213565b602082019050919050565b6000610d63602a83610f7d565b9150610d6e8261123c565b604082019050919050565b610d8281611026565b82525050565b6000610d948284610bd4565b915081905092915050565b6000602082019050610db46000830184610bc5565b92915050565b6000606082019050610dcf6000830186610bc5565b610ddc6020830185610bc5565b610de96040830184610d79565b949350505050565b6000604082019050610e066000830185610bc5565b610e136020830184610d79565b9392505050565b60006020820190508181036000830152610e348184610c05565b905092915050565b60006020820190508181036000830152610e5581610c3e565b9050919050565b60006020820190508181036000830152610e7581610c61565b9050919050565b60006020820190508181036000830152610e9581610c84565b9050919050565b60006020820190508181036000830152610eb581610ca7565b9050919050565b60006020820190508181036000830152610ed581610cca565b9050919050565b60006020820190508181036000830152610ef581610ced565b9050919050565b60006020820190508181036000830152610f1581610d10565b9050919050565b60006020820190508181036000830152610f3581610d33565b9050919050565b60006020820190508181036000830152610f5581610d56565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610f9982611026565b9150610fa483611026565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fdd57610fdc611063565b5b828202905092915050565b6000610ff382611006565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561104e578082015181840152602081019050611033565b8381111561105d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c69642d6465706f7369746f72000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c69642d616d6f756e74000000000000000000000000000000000000600082015250565b7f696e76616c69642d707269636500000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f696e76616c69642d636f6e747261637400000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61129481610fe8565b811461129f57600080fd5b50565b6112ab81610ffa565b81146112b657600080fd5b50565b6112c281611026565b81146112cd57600080fd5b5056fea26469706673582212209a19b54df9fa348cacfba0193176d851a96cad3c332ed8207e560b7d644dfc8164736f6c63430008070033";

type OptionsMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptionsMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptionsMarket__factory extends ContractFactory {
  constructor(...args: OptionsMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OptionsMarket> {
    return super.deploy(_usdc, overrides || {}) as Promise<OptionsMarket>;
  }
  override getDeployTransaction(
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_usdc, overrides || {});
  }
  override attach(address: string): OptionsMarket {
    return super.attach(address) as OptionsMarket;
  }
  override connect(signer: Signer): OptionsMarket__factory {
    return super.connect(signer) as OptionsMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptionsMarketInterface {
    return new utils.Interface(_abi) as OptionsMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptionsMarket {
    return new Contract(address, _abi, signerOrProvider) as OptionsMarket;
  }
}
