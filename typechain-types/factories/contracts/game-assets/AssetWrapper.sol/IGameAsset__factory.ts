/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IGameAsset,
  IGameAssetInterface,
} from "../../../../contracts/game-assets/AssetWrapper.sol/IGameAsset";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "setOwnerOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IGameAsset__factory {
  static readonly abi = _abi;
  static createInterface(): IGameAssetInterface {
    return new utils.Interface(_abi) as IGameAssetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGameAsset {
    return new Contract(address, _abi, signerOrProvider) as IGameAsset;
  }
}
