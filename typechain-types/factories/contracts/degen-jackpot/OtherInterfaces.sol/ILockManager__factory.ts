/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILockManager,
  ILockManagerInterface,
} from "../../../../contracts/degen-jackpot/OtherInterfaces.sol/ILockManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fnftId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "addressLock",
            type: "address",
          },
          {
            internalType: "enum IRevest.LockType",
            name: "lockType",
            type: "uint8",
          },
        ],
        internalType: "struct IRevest.LockParam",
        name: "lock",
        type: "tuple",
      },
    ],
    name: "createLock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fnftId",
        type: "uint256",
      },
    ],
    name: "fnftIdToLock",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addressLock",
            type: "address",
          },
          {
            internalType: "enum IRevest.LockType",
            name: "lockType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "unlocked",
            type: "bool",
          },
        ],
        internalType: "struct IRevest.Lock",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fnftId",
        type: "uint256",
      },
    ],
    name: "fnftIdToLockId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
    ],
    name: "getLock",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addressLock",
            type: "address",
          },
          {
            internalType: "enum IRevest.LockType",
            name: "lockType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "unlocked",
            type: "bool",
          },
        ],
        internalType: "struct IRevest.Lock",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fnftId",
        type: "uint256",
      },
    ],
    name: "getLockMaturity",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "lockTypes",
    outputs: [
      {
        internalType: "enum IRevest.LockType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fnftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
    ],
    name: "pointFNFTToLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fnftId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "unlockFNFT",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ILockManager__factory {
  static readonly abi = _abi;
  static createInterface(): ILockManagerInterface {
    return new utils.Interface(_abi) as ILockManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILockManager {
    return new Contract(address, _abi, signerOrProvider) as ILockManager;
  }
}
