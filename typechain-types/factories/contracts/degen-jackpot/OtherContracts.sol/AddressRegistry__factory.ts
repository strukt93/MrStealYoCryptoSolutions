/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AddressRegistry,
  AddressRegistryInterface,
} from "../../../../contracts/degen-jackpot/OtherContracts.sol/AddressRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLockManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRevest",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRevestFNFT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "setLockManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "revest",
        type: "address",
      },
    ],
    name: "setRevest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fnft",
        type: "address",
      },
    ],
    name: "setRevestFNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    name: "setTokenVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107f48061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639bb363a9116100715780639bb363a914610157578063d59e296e14610173578063deedfdbd14610191578063f2fde38b146101ad578063f95eb482146101c9578063f97e7d74146101e5576100b4565b8063035d0c69146100b957806354f2f7af146100d75780636497a8a0146100f55780636e9960c314610111578063715018a61461012f5780638da5cb5b14610139575b600080fd5b6100c1610203565b6040516100ce919061068c565b60405180910390f35b6100df61022d565b6040516100ec919061068c565b60405180910390f35b61010f600480360381019061010a919061060a565b610257565b005b6101196102a3565b604051610126919061068c565b60405180910390f35b6101376102b2565b005b6101416102c6565b60405161014e919061068c565b60405180910390f35b610171600480360381019061016c919061060a565b6102ef565b005b61017b61033b565b604051610188919061068c565b60405180910390f35b6101ab60048036038101906101a6919061060a565b610365565b005b6101c760048036038101906101c2919061060a565b6103b1565b005b6101e360048036038101906101de919061060a565b610435565b005b6101ed610481565b6040516101fa919061068c565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025f6104ab565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102ad6102c6565b905090565b6102ba6104ab565b6102c46000610529565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102f76104ab565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61036d6104ab565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103b96104ab565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610429576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610420906106a7565b60405180910390fd5b61043281610529565b50565b61043d6104ab565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104b36105ed565b73ffffffffffffffffffffffffffffffffffffffff166104d16102c6565b73ffffffffffffffffffffffffffffffffffffffff1614610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e906106c7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610604816107a7565b92915050565b6000602082840312156106205761061f61072a565b5b600061062e848285016105f5565b91505092915050565b610640816106f8565b82525050565b60006106536026836106e7565b915061065e8261072f565b604082019050919050565b60006106766020836106e7565b91506106818261077e565b602082019050919050565b60006020820190506106a16000830184610637565b92915050565b600060208201905081810360008301526106c081610646565b9050919050565b600060208201905081810360008301526106e081610669565b9050919050565b600082825260208201905092915050565b60006107038261070a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6107b0816106f8565b81146107bb57600080fd5b5056fea26469706673582212208aa200f14d521cddae7e944d1770ad1939ec672658616c497606e9d365f78b8364736f6c63430008070033";

type AddressRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressRegistry__factory extends ContractFactory {
  constructor(...args: AddressRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AddressRegistry> {
    return super.deploy(overrides || {}) as Promise<AddressRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressRegistry {
    return super.attach(address) as AddressRegistry;
  }
  override connect(signer: Signer): AddressRegistry__factory {
    return super.connect(signer) as AddressRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressRegistryInterface {
    return new utils.Interface(_abi) as AddressRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressRegistry {
    return new Contract(address, _abi, signerOrProvider) as AddressRegistry;
  }
}
