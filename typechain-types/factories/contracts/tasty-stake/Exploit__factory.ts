/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Exploit,
  ExploitInterface,
} from "../../../contracts/tasty-stake/Exploit";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "migrateWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c24436c14610030575b600080fd5b61004a6004803603810190610045919061007a565b61004c565b005b5050565b60008135905061005f816100fb565b92915050565b60008135905061007481610112565b92915050565b60008060408385031215610091576100906100f6565b5b600061009f85828601610050565b92505060206100b085828601610065565b9150509250929050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b610104816100ba565b811461010f57600080fd5b50565b61011b816100ec565b811461012657600080fd5b5056fea26469706673582212204545c4eea1d9aaae795a21fc54c834c162cde83ee0bd45ce28ada8f59629f78664736f6c63430008070033";

type ExploitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exploit__factory extends ContractFactory {
  constructor(...args: ExploitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Exploit> {
    return super.deploy(overrides || {}) as Promise<Exploit>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Exploit {
    return super.attach(address) as Exploit;
  }
  override connect(signer: Signer): Exploit__factory {
    return super.connect(signer) as Exploit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitInterface {
    return new utils.Interface(_abi) as ExploitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exploit {
    return new Contract(address, _abi, signerOrProvider) as Exploit;
  }
}
