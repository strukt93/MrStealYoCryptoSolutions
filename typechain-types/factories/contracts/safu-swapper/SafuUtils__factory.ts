/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SafuUtils,
  SafuUtilsInterface,
} from "../../../contracts/safu-swapper/SafuUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "units",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "calcLiquidityShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "B",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "t",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "T",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "P",
        type: "uint256",
      },
    ],
    name: "calcLiquidityUnits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "part",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calcShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "X",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "Y",
        type: "uint256",
      },
    ],
    name: "calcSwapOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "B",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "t",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "T",
        type: "uint256",
      },
    ],
    name: "getSlipAdjustment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "one",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a37806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806302bf4bf8146100675780631ba326c414610097578063701baaf3146100c75780637d4bb5eb146100f7578063901717d114610127578063c5c11ee914610145575b600080fd5b610081600480360381019061007c91906106e9565b610175565b60405161008e9190610804565b60405180910390f35b6100b160048036038101906100ac9190610696565b61028d565b6040516100be9190610804565b60405180910390f35b6100e160048036038101906100dc9190610696565b6102bd565b6040516100ee9190610804565b60405180910390f35b610111600480360381019061010c9190610643565b610340565b60405161011e9190610804565b60405180910390f35b61012f610480565b60405161013c9190610804565b60405180910390f35b61015f600480360381019061015a9190610750565b61048c565b60405161016c9190610804565b60405180910390f35b60008061018b848661057f90919063ffffffff16565b905060006101a2848861057f90919063ffffffff16565b905060006101cc876101be60028b61057f90919063ffffffff16565b61059590919063ffffffff16565b905060006101e3868861059590919063ffffffff16565b90506000838511156102095761020284866105ab90919063ffffffff16565b905061021f565b61021c85856105ab90919063ffffffff16565b90505b6000610234838561057f90919063ffffffff16565b905061027d61026682610258670de0b6b3a76400008661057f90919063ffffffff16565b6105c190919063ffffffff16565b670de0b6b3a76400006105ab90919063ffffffff16565b9650505050505050949350505050565b60006102b4836102a6868561057f90919063ffffffff16565b6105c190919063ffffffff16565b90509392505050565b6000806102e56102d6848661057f90919063ffffffff16565b8661057f90919063ffffffff16565b905060006103206102ff868861059590919063ffffffff16565b610312878961059590919063ffffffff16565b61057f90919063ffffffff16565b905061033581836105c190919063ffffffff16565b925050509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161037c91906107e9565b60206040518083038186803b15801561039457600080fd5b505afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc9190610616565b905060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041657600080fd5b505afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190610616565b905061047581610467888561057f90919063ffffffff16565b6105c190919063ffffffff16565b925050509392505050565b670de0b6b3a764000081565b60008082141561049e57859050610576565b60006104ac87878787610175565b905060006104c3878761057f90919063ffffffff16565b905060006104da898761057f90919063ffffffff16565b9050600061050460026104f68b8a61057f90919063ffffffff16565b61057f90919063ffffffff16565b9050600061053f82610531610522868861059590919063ffffffff16565b8a61057f90919063ffffffff16565b6105c190919063ffffffff16565b905061056e670de0b6b3a7640000610560878461057f90919063ffffffff16565b6105c190919063ffffffff16565b955050505050505b95945050505050565b6000818361058d91906108a6565b905092915050565b600081836105a3919061081f565b905092915050565b600081836105b99190610900565b905092915050565b600081836105cf9190610875565b905092915050565b6000813590506105e6816109d3565b92915050565b6000813590506105fb816109ea565b92915050565b600081519050610610816109ea565b92915050565b60006020828403121561062c5761062b6109ce565b5b600061063a84828501610601565b91505092915050565b60008060006060848603121561065c5761065b6109ce565b5b600061066a868287016105ec565b935050602061067b868287016105d7565b925050604061068c868287016105d7565b9150509250925092565b6000806000606084860312156106af576106ae6109ce565b5b60006106bd868287016105ec565b93505060206106ce868287016105ec565b92505060406106df868287016105ec565b9150509250925092565b60008060008060808587031215610703576107026109ce565b5b6000610711878288016105ec565b9450506020610722878288016105ec565b9350506040610733878288016105ec565b9250506060610744878288016105ec565b91505092959194509250565b600080600080600060a0868803121561076c5761076b6109ce565b5b600061077a888289016105ec565b955050602061078b888289016105ec565b945050604061079c888289016105ec565b93505060606107ad888289016105ec565b92505060806107be888289016105ec565b9150509295509295909350565b6107d481610934565b82525050565b6107e381610966565b82525050565b60006020820190506107fe60008301846107cb565b92915050565b600060208201905061081960008301846107da565b92915050565b600061082a82610966565b915061083583610966565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561086a57610869610970565b5b828201905092915050565b600061088082610966565b915061088b83610966565b92508261089b5761089a61099f565b5b828204905092915050565b60006108b182610966565b91506108bc83610966565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156108f5576108f4610970565b5b828202905092915050565b600061090b82610966565b915061091683610966565b92508282101561092957610928610970565b5b828203905092915050565b600061093f82610946565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6109dc81610934565b81146109e757600080fd5b50565b6109f381610966565b81146109fe57600080fd5b5056fea26469706673582212202ab69dccc1073022f6dd693d892efa4f0a79e9b33001f18dc891f613da30894b64736f6c63430008070033";

type SafuUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafuUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafuUtils__factory extends ContractFactory {
  constructor(...args: SafuUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SafuUtils> {
    return super.deploy(overrides || {}) as Promise<SafuUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafuUtils {
    return super.attach(address) as SafuUtils;
  }
  override connect(signer: Signer): SafuUtils__factory {
    return super.connect(signer) as SafuUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafuUtilsInterface {
    return new utils.Interface(_abi) as SafuUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafuUtils {
    return new Contract(address, _abi, signerOrProvider) as SafuUtils;
  }
}
